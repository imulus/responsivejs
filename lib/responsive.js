// Generated by CoffeeScript 1.3.3
(function() {

  window._R_ = (function() {
    var propagate_change_callbacks;

    function _R_(window) {
      var _this = this;
      this.window = window != null ? window : window;
      this._stops = {};
      this.change_callbacks = [];
      this.last = 'unknown';
      this.current = 'unknown';
      this.window.onresize = function() {
        return _this.update();
      };
    }

    _R_.prototype.stops = function(stops) {
      this._stops = stops;
      return this.update();
    };

    _R_.prototype.update = function() {
      var media_query, query, stop, _ref, _results;
      _ref = this._stops;
      _results = [];
      for (stop in _ref) {
        media_query = _ref[stop];
        query = this.window.matchMedia(media_query);
        this.last = this.current;
        if (query.matches) {
          this.current = stop;
        }
        if (this.current !== this.last) {
          _results.push(propagate_change_callbacks.call(this, this.current, this.last));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    _R_.prototype.is = function(stop) {
      return this.current === stop;
    };

    _R_.prototype.isnt = function(stop) {
      return !this.is(stop);
    };

    _R_.prototype.change = function(callback) {
      return this.change_callbacks.push(callback);
    };

    propagate_change_callbacks = function(into, from) {
      var callback, _i, _len, _ref, _results;
      _ref = this.change_callbacks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        _results.push(callback(into, from));
      }
      return _results;
    };

    return _R_;

  })();

  window.R = new _R_(window);

}).call(this);
