// Generated by CoffeeScript 1.3.3
(function() {

  window._R_ = (function() {
    var propagate_change_callbacks;

    function _R_(window) {
      var _this = this;
      this.window = window != null ? window : window;
      this._stops = {};
      this._callbacks = {
        change: [],
        from: {},
        into: {}
      };
      this.last = 'unknown';
      this.current = 'unknown';
      this.window.onresize = function() {
        return _this.update();
      };
    }

    _R_.prototype.stops = function(stops) {
      this._stops = stops;
      return this.update();
    };

    _R_.prototype.update = function() {
      var media_query, query, stop, _ref, _results;
      _ref = this._stops;
      _results = [];
      for (stop in _ref) {
        media_query = _ref[stop];
        query = this.window.matchMedia(media_query);
        this.last = this.current;
        if (query.matches) {
          this.current = stop;
        }
        if (this.current !== this.last) {
          _results.push(propagate_change_callbacks.call(this, this.current, this.last));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    _R_.prototype.is = function(stop) {
      return this.current === stop;
    };

    _R_.prototype.isnt = function(stop) {
      return !this.is(stop);
    };

    _R_.prototype.change = function(callback) {
      if (typeof callback !== 'function') {
        throw new TypeError("[R.change(callback)] callback must be a function");
      }
      return this._callbacks.change.push(callback);
    };

    _R_.prototype.from = function(stop, callback) {
      if (typeof callback !== 'function') {
        throw new TypeError("[R.from(stop, callback)] callback must be a function");
      }
      if (this._callbacks.from[stop] == null) {
        this._callbacks.from[stop] = [];
      }
      return this._callbacks.from[stop].push(callback);
    };

    _R_.prototype.into = function(stop, callback) {
      if (typeof callback !== 'function') {
        throw new TypeError("[R.into(stop, callback)] callback must be a function");
      }
      if (this._callbacks.into[stop] == null) {
        this._callbacks.into[stop] = [];
      }
      return this._callbacks.into[stop].push(callback);
    };

    propagate_change_callbacks = function(into, from) {
      var callback, callbacks, stop, _i, _j, _len, _len1, _ref, _ref1, _ref2, _results;
      _ref = this._callbacks.change;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        callback(into, from);
      }
      _ref1 = this._callbacks.from;
      for (stop in _ref1) {
        callbacks = _ref1[stop];
        for (_j = 0, _len1 = callbacks.length; _j < _len1; _j++) {
          callback = callbacks[_j];
          if (stop === from) {
            callback(into);
          }
        }
      }
      _ref2 = this._callbacks.into;
      _results = [];
      for (stop in _ref2) {
        callbacks = _ref2[stop];
        _results.push((function() {
          var _k, _len2, _results1;
          _results1 = [];
          for (_k = 0, _len2 = callbacks.length; _k < _len2; _k++) {
            callback = callbacks[_k];
            if (stop === into) {
              _results1.push(callback(from));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };

    return _R_;

  })();

  window.R = new _R_(window);

}).call(this);
